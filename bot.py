import os
import json
import logging
import asyncio
from aiohttp import web
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –õ–æ–≥–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not BOT_TOKEN or not WEBHOOK_URL:
    logger.critical("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ WEBHOOK_URL")
    exit(1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
    await update.message.reply_text(f"üîç –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}")

# –í–µ–±—Ö—É–∫ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
async def handle_webhook(request):
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        data = await request.json()
        logger.info(f"Received webhook data: {json.dumps(data, indent=2)}")
        
        # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç
        update = Update.de_json(data, request.app['bot_app'].bot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ø–¥–µ–π—Ç
        await request.app['bot_app'].process_update(update)
        
        return web.Response(text="OK", status=200)
        
    except Exception as e:
        logger.error(f"Webhook error: {str(e)}", exc_info=True)
        return web.Response(text=f"Error: {str(e)}", status=500)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è GET/HEAD –∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_health_check(request):
    return web.Response(text="Bot is alive")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
async def setup_bot():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    return app

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiohttp
async def init_app():
    bot_app = await setup_bot()
    app = web.Application()
    app['bot_app'] = bot_app
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_post("/", handle_webhook)
    app.router.add_route("*", "/", handle_health_check)
    app.router.add_get("/health", handle_health_check)
    
    return app

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    loop = asyncio.get_event_loop()
    app = loop.run_until_complete(init_app())
    web.run_app(app, host="0.0.0.0", port=10000)