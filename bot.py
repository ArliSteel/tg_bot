import asyncio  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö —Ñ–∞–π–ª–∞
import os
import json
import httpx
import logging
import tempfile
import subprocess
from aiohttp import web
from pydub import AudioSegment
from telegram import Update, Bot, File, Voice
from telegram.ext import Application, ContextTypes, CommandHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([BOT_TOKEN, WEBHOOK_URL, YANDEX_API_KEY, YANDEX_FOLDER_ID]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∞–ª–æ–Ω–∞
SALON_INFO = {
    "name": "Right.style89 | –°—Ç—É–¥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π",
    "address": "–≥. –°–∞–ª–µ—Ö–∞—Ä–¥, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ü–ª–æ—â–∞–¥–∫–∞ ‚Ññ 13, —Å 26",
    "contacts": "https://vk.com/right.style89",
    "working_hours": "10:00-22:00 (–±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö)",
    "services": {
        "–£–¥–∞–ª–µ–Ω–∏–µ –≤–º—è—Ç–∏–Ω": "–æ—Ç 2500‚ÇΩ",
        "–†–µ–º–æ–Ω—Ç —Ü–∞—Ä–∞–ø–∏–Ω": "–æ—Ç 1800‚ÇΩ",
        "–†–µ–º–æ–Ω—Ç —Å–∫–æ–ª–æ–≤": "–æ—Ç 5000‚ÇΩ"
    }
}

SYSTEM_PROMPT = f"""..."""  # –í–∞—à –ø—Ä–æ–º–ø—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

class YandexGPTClient:
    @staticmethod
    async def generate_response(user_message: str) -> str:
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
                    headers={
                        "Authorization": f"Bearer {YANDEX_API_KEY}",
                        "x-folder-id": YANDEX_FOLDER_ID
                    },
                    json={
                        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt",
                        "messages": [
                            {"role": "system", "text": SYSTEM_PROMPT},
                            {"role": "user", "text": user_message}
                        ]
                    }
                )
                response.raise_for_status()
                return response.json()['result']['alternatives'][0]['message']['text'].strip()
        except Exception as e:
            logger.error(f"YandexGPT error: {str(e)}")
            return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        logger.info(f"–í–æ–ø—Ä–æ—Å: {text}")
        reply = await YandexGPTClient.generate_response(text)
        await update.message.reply_text(reply)
    except Exception as e:
        logger.error(f"Text handler error: {e}")
        await update.message.reply_text("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.")

async def health_check(request):
    """–î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã"""
    return web.Response(text="Bot is alive")

async def setup_application():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        app = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞
        bot = Bot(token=BOT_TOKEN)
        webhook_info = await bot.get_webhook_info()
        logger.info(f"Current webhook: {webhook_info.url}")
        
        if webhook_info.url != WEBHOOK_URL:
            logger.info("Updating webhook...")
            await bot.set_webhook(WEBHOOK_URL)
        
        return app
    except Exception as e:
        logger.critical(f"Failed to setup application: {e}")
        raise

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        app = web.Application()
        app.router.add_post("/", handle_webhook)
        app.router.add_get("/health", health_check)
        
        global application
        application = await setup_application()
        
        return app
    except Exception as e:
        logger.critical(f"Failed to start: {e}")
        exit(1)

if __name__ == "__main__":
    # –£—Å–∏–ª–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    logger.info("Starting bot with config:")
    logger.info(f"Bot token: {BOT_TOKEN[:5]}...{BOT_TOKEN[-5:]}")
    logger.info(f"Webhook URL: {WEBHOOK_URL}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º event loop –≤—Ä—É—á–Ω—É—é
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = loop.run_until_complete(main())
        web.run_app(app, port=10000, access_log=logger)
    except Exception as e:
        logger.critical(f"Fatal error: {str(e)}")
        exit(1)
