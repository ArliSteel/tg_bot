import os
import json
import httpx
import logging
import tempfile
from aiohttp import web
from pydub import AudioSegment
from telegram import Update, File, Voice
from telegram.ext import Application, ContextTypes, CommandHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∞–ª–æ–Ω–∞
SALON_INFO = {
    "name": "Right.style89 | –°—Ç—É–¥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–µ–µ—Å—è –Ω–∞ –ª–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω–æ–º –ø–æ–∫—Ä—ã—Ç–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
    "address": "–≥. –°–∞–ª–µ—Ö–∞—Ä–¥, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ü–ª–æ—â–∞–¥–∫–∞ ‚Ññ 13, —Å 26",
    "contacts": "https://vk.com/right.style89",
    "working_hours": "10:00-22:00 (–±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö)",
    "services": {
        "–£–¥–∞–ª–µ–Ω–∏–µ –≤–º—è—Ç–∏–Ω –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ PDR": "–æ—Ç 2500‚ÇΩ",
        "–†–µ–º–æ–Ω—Ç-—Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è —Ü–∞—Ä–∞–ø–∏–Ω –¥–æ –º–µ—Ç–∞–ª–ª–∞": "–æ—Ç 1800‚ÇΩ",
        "–†–µ–º–æ–Ω—Ç-—Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è —Å–∫–æ–ª–æ–≤ –¥–æ –º–µ—Ç–∞–ª–ª–∞": "–æ—Ç 5000‚ÇΩ",
        "–†–µ–º–æ–Ω—Ç-—Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è –∫–∞–Ω—Ç–æ–≤": "–æ—Ç 2000‚ÇΩ",
        "–†–µ–º–æ–Ω—Ç-—Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤": "–æ—Ç 2500‚ÇΩ",
        "–ê–Ω—Ç–∏-—Ö—Ä–æ–º –∏ –æ–∫—Ä–∞—Å —à–∏–ª—å–¥–∏–∫–æ–≤": "–æ—Ç 5000‚ÇΩ",
        "–ü–æ–ª–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è": "–æ—Ç 15000‚ÇΩ"
    }
}

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
SYSTEM_PROMPT = f"""
–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–∞–ª–æ–Ω–∞ –ø–æ –¥–µ—Ç–µ–π–ª–∏–Ω–≥—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ —Ç—ã –º–æ–∂–µ—à—å –ª–µ–≥–∫–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É —Å–≤—è–∑–∞–Ω–Ω–æ–º—É —Å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Å–∞–ª–æ–Ω–∞ –∏–ª–∏ –Ω—å—é–∞–Ω—Å–∞–º–∏ –¥–µ—Ç–µ–π–ª–∏–Ω–≥–∞ –∞–≤—Ç–æ "{SALON_INFO['name']}".

**–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
- –ê–¥—Ä–µ—Å: {SALON_INFO['address']}
- –¢–µ–ª–µ—Ñ–æ–Ω: {SALON_INFO['contacts']}
- –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {SALON_INFO['working_hours']}

**–û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã:**
{json.dumps(SALON_INFO['services'], indent=2, ensure_ascii=False)}

**–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:**
1. –í–µ–∂–ª–∏–≤—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
2. –ù–µ –¥–∞–≤–∞—Ç—å –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–µ—Ç–µ–π–ª–∏–Ω–≥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Å–æ–≤–µ—Ç–æ–≤
3. –ù–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –ø–æ —Ç–µ–º–µ –æ—Ç–≤–µ—á–∞—Ç—å: "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ª—É—á—à–µ —É—Ç–æ—á–Ω–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
4. –ù–∞ –∞–≥—Ä–µ—Å—Å–∏—é —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ
5. –í—Å–µ —Ü–µ–Ω—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–∫ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ
6. –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –¥–µ—Ç–µ–π–ª–∏–Ω–≥–æ–º –∏ —Å—Ö–æ–∂–∏–º–∏ —Ç–µ–º–∞–º–∏ –∫–∞—Å–∞—é—â–∏–µ—Å—è —Ç–µ–º–∞—Ç–∏–∫–µ —Å–∞–ª–æ–Ω–∞, –æ—Ç–≤–µ—á–∞–π –µ–º—É –∫–æ—Ä–æ—Ç–∫–æ –∏ —è—Å–Ω–æ.

**–í–∞–∂–Ω–æ:**
- –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∞–∫—Ü–∏–∏ - –æ—Ç–≤–µ—á–∞–π "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
- –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª—É–≥–∏
- –ù–∞ –∑–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É —Å–∞–ª–æ–Ω–∞
"""

YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
YANDEX_ASR_URL = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize"

MODEL_CONFIG = {
    "temperature": 0.3,
    "max_tokens": 300
}


class YandexGPTClient:
    @staticmethod
    async def generate_response(user_message: str) -> str:
        headers = {
            "Authorization": f"Bearer {YANDEX_API_KEY}",
            "x-folder-id": YANDEX_FOLDER_ID,
            "Content-Type": "application/json"
        }

        payload = {
            "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt",
            "completionOptions": {
                "stream": False,
                "temperature": MODEL_CONFIG["temperature"],
                "maxTokens": MODEL_CONFIG["max_tokens"]
            },
            "messages": [
                {"role": "system", "text": SYSTEM_PROMPT},
                {"role": "user", "text": user_message}
            ]
        }

        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(YANDEX_GPT_URL, headers=headers, json=payload)
                response.raise_for_status()
                data = response.json()
                return data['result']['alternatives'][0]['message']['text'].strip()
        except Exception as e:
            logger.error(f"YandexGPT error: {str(e)}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


async def transcribe_voice(file_path: str) -> str:
    headers = {
        "Authorization": f"Bearer {YANDEX_API_KEY}"
    }

    params = {
        "folderId": YANDEX_FOLDER_ID,
        "lang": "ru-RU"
    }

    with open(file_path, "rb") as f:
        data = f.read()

    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(YANDEX_ASR_URL, headers=headers, params=params, content=data)
            response.raise_for_status()
            result = response.json()
            return result.get("result", "")
    except Exception as e:
        logger.error(f"SpeechKit error: {str(e)}")
        return ""


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_msg = (
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {SALON_INFO['name']}!\n\n"
        f"–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö.\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏: {SALON_INFO['contacts']}"
    )
    await update.message.reply_text(welcome_msg)


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    logger.info(f"Received message: {user_text}")

    reply = await YandexGPTClient.generate_response(user_text)

    banned_phrases = ["–ª–µ—á–µ–±–Ω", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫", "–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º", "100%"]
    if any(phrase in reply.lower() for phrase in banned_phrases):
        reply = "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞."

    await update.message.reply_text(reply)


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    try:
        voice: Voice = update.message.voice
        file: File = await context.bot.get_file(voice.file_id)

        with tempfile.TemporaryDirectory() as tmp_dir:
            ogg_path = os.path.join(tmp_dir, "voice.ogg")
            wav_path = os.path.join(tmp_dir, "voice.wav")

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ .ogg —Ñ–∞–π–ª–∞
            await file.download_to_drive(ogg_path)
            logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {ogg_path}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ffmpeg
            ffmpeg_path = subprocess.getoutput("which ffmpeg")
            logger.info(f"ffmpeg –ø—É—Ç—å: {ffmpeg_path}")
            if not ffmpeg_path:
                await update.message.reply_text("‚ö†Ô∏è ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è .ogg ‚Üí .wav
            try:
                AudioSegment.converter = ffmpeg_path  # —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å
                sound = AudioSegment.from_file(ogg_path)
                sound.export(wav_path, format="wav")
                logger.info(f"–§–∞–π–ª —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ wav: {wav_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç.")
                return

            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
            text = await transcribe_voice(wav_path)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: '{text}'")

            if not text:
                await update.message.reply_text("ü§∑ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á—ë—Ç—á–µ –∏–ª–∏ –∫–æ—Ä–æ—á–µ.")
                return

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            reply = await YandexGPTClient.generate_response(text)
            await update.message.reply_text(reply)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è üõ†Ô∏è")


# –í–µ–±—Ö—É–∫
async def handle_webhook(request):
    data = await request.json()
    logger.warning(f"== RAW TELEGRAM UPDATE ==\n{json.dumps(data, indent=2, ensure_ascii=False)}")

    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return web.Response()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram App
async def setup_application():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    await app.initialize()
    await app.bot.set_webhook(
        url=WEBHOOK_URL
    )
    return app


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    global application
    application = await setup_application()

    app = web.Application()
    app.router.add_post("/", handle_webhook)
    return app


if __name__ == "__main__":
   import asyncio
from aiohttp import web

async def full_start():
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞
    try:
        from reset_webhook import reset
        await reset()
    except ImportError:
        logger.info("reset_webhook –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    global application
    application = await setup_application()

    app = web.Application()
    app.router.add_post("/", handle_webhook)

    return app

if __name__ == "__main__":
    app = asyncio.run(full_start())  # –ó–∞–ø—É—Å–∫–∞–µ–º async —á–∞—Å—Ç—å –∏ –ø–æ–ª—É—á–∞–µ–º app
    web.run_app(app, port=10000)     # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
