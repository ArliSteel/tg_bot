# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

import os
import json
import httpx
import logging
import asyncio
import random
import time
import re
from aiohttp import web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from security import security, secure_handler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ —Å –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config = {
        'BOT_TOKEN': os.getenv("TELEGRAM_TOKEN"),
        'WEBHOOK_URL': os.getenv("WEBHOOK_URL"),
        'YANDEX_API_KEY': os.getenv("YANDEX_API_KEY"),
        'YANDEX_FOLDER_ID': os.getenv("YANDEX_FOLDER_ID")
    }
    
    missing_vars = [key for key, value in config.items() if not value]
    if missing_vars:
        logger.critical(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
        exit(1)
    
    return config

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
CONFIG = load_config()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∞–ª–æ–Ω–∞ (–≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫)
SALON_CONFIG = {
    "name": "Right Style 89 | –°—Ç—É–¥–∏—è –¥–µ—Ç–µ–π–ª–∏–Ω–≥–∞",
    "address": "–≥. –°–∞–ª–µ—Ö–∞—Ä–¥, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ü–ª–æ—â–∞–¥–∫–∞ ‚Ññ 13, —Å. 26",
    "contacts": "+7 (912) 345-67-89",
    "working_hours": "10:00-22:00 (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)",
    "social_media": {
        "VK": "https://vk.com/right.style89",
        "Instagram": "@right.style89",
        "Telegram": "@Rightstyle89"
    },
    "services": {
        "üöó –£–¥–∞–ª–µ–Ω–∏–µ –≤–º—è—Ç–∏–Ω PDR": "–æ—Ç 1000‚ÇΩ",
        "üîß –†–µ–º–æ–Ω—Ç —Ü–∞—Ä–∞–ø–∏–Ω –¥–æ –º–µ—Ç–∞–ª–ª–∞": "–æ—Ç 2500‚ÇΩ",
        "üéØ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç —Å–∫–æ–ª–æ–≤": "–æ—Ç 1000‚ÇΩ",
        "‚ú® –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω—Ç–æ–≤ –∏ –ø–æ—Ä–æ–≥–æ–≤": "–æ—Ç 2800‚ÇΩ",
        "‚ö´Ô∏è –ê–Ω—Ç–∏—Ö—Ä–æ–º (—á–µ—Ä–Ω–µ–Ω–∏–µ —Ö—Ä–æ–º–∞):": "–æ—Ç 500‚ÇΩ",
        "üé® –û–∫—Ä–∞—Å —à–∏–ª—å–¥–∏–∫–æ–≤ –∏ —ç–º–±–ª–µ–º": "–æ—Ç 800‚ÇΩ",
        "üí´ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω": "–ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏",
        "üîÜ –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–∫—Ä–∞—Å–∫–∞ –¥–µ—Ç–∞–ª–µ–π": "–æ—Ç 5000‚ÇΩ",
        "üíé –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞ –∫—É–∑–æ–≤–∞": "–æ—Ç 12000‚ÇΩ",
        "üí° –ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Ñ–∞—Ä –∏ —Å—Ç–æ–ø-—Å–∏–≥–Ω–∞–ª–æ–≤": "–æ—Ç 2500‚ÇΩ",
        "üõ°Ô∏è –ö–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ": "–æ—Ç 15000‚ÇΩ",
        "üßº –•–∏–º—á–∏—Å—Ç–∫–∞ —Å–∞–ª–æ–Ω–∞": "–æ—Ç 8000‚ÇΩ"
    },
    "unique_selling_points": [
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –õ–ö–ü",
        "–ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –≤—Å–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç 12 –º–µ—Å—è—Ü–µ–≤",
        "–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã Ceramic Pro, Koch Chemie",
        "–†–∞–±–æ—Ç–∞–µ–º —Å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏: Mercedes, BMW, Audi, Porsche",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è Paintless Dent Repair (PDR)",
        "–≠–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –±–µ–∑ —Ç–æ–∫—Å–∏—á–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤"
    ]
}

# FAQ –∫–∞—Ä—Ç–æ—á–∫–∏
FAQ_CARDS = {
    "pdr_technology": {
        "question": "ü§î –ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è PDR?",
        "answer": "üîß *PDR (Paintless Dent Repair)* ‚Äî —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–º—è—Ç–∏–Ω –±–µ–∑ –ø–æ–∫—Ä–∞—Å–∫–∏.\n\n*–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–æ–¥—Å–∫–æ–≥–æ –õ–ö–ü\n‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–æ—Ç 30 –º–∏–Ω—É—Ç)\n‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è 12 –º–µ—Å—è—Ü–µ–≤\n‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –¥–æ 70% compared —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º —Ä–µ–º–æ–Ω—Ç–æ–º"
    },
    "ceramic_coating": {
        "question": "üíé –ß—Ç–æ –¥–∞–µ—Ç –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ?",
        "answer": "‚ú® *–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ* ‚Äî —ç—Ç–æ –Ω–∞–Ω–æ-–∑–∞—â–∏—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ:\n\n*–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –£–§-–ª—É—á–µ–π –∏ –≤—ã—Ü–≤–µ—Ç–∞–Ω–∏—è\n‚Ä¢ –°—Ç–æ–π–∫–æ—Å—Ç—å –∫ —Ö–∏–º–∏—á–µ—Å–∫–∏–º –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è–º\n‚Ä¢ –ì–∏–¥—Ä–æ—Ñ–æ–±–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç (–≤–æ–¥–∞ —Å–∫–∞—Ç—ã–≤–∞–µ—Ç—Å—è)\n‚Ä¢ –õ–µ–≥–∫–æ—Å—Ç—å –≤ –º–æ–π–∫–µ\n‚Ä¢ –ë–ª–µ—Å–∫ –∫–∞–∫ —É –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ\n‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –¥–æ 5 –ª–µ—Ç"
    },
    "polishing_types": {
        "question": "üîÜ –ö–∞–∫–∏–µ –≤–∏–¥—ã –ø–æ–ª–∏—Ä–æ–≤–∫–∏ –±—ã–≤–∞—é—Ç?",
        "answer": "üìã *–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º 3 –≤–∏–¥–∞ –ø–æ–ª–∏—Ä–æ–≤–∫–∏:*\n\n1. *–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è* ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ —Ü–∞—Ä–∞–ø–∏–Ω –∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤\n2. *–ó–∞—â–∏—Ç–Ω–∞—è* ‚Äî –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ –≤–æ—Å–∫–æ–≤/—Å–∏–Ω—Ç–µ—Ç–∏–∫–∏\n3. *–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è* ‚Äî –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞\n\nüí° *–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞* –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –Ω—É–∂–Ω—ã–π —Ç–∏–ø –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ!"
    },
    "paint_repair": {
        "question": "üé® –ö–∞–∫ —Ä–µ–º–æ–Ω—Ç–∏—Ä—É—é—Ç —Å–∫–æ–ª—ã –∏ —Ü–∞—Ä–∞–ø–∏–Ω—ã?",
        "answer": "üõ†Ô∏è *–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–º–æ–Ω—Ç–∞ –õ–ö–ü:*\n\n1. –û—á–∏—Å—Ç–∫–∞ –∏ –æ–±–µ–∑–∂–∏—Ä–∏–≤–∞–Ω–∏–µ\n2. –ü–æ–¥–±–æ—Ä —Ü–≤–µ—Ç–∞ –ø–æ VIN-–∫–æ–¥—É\n3. –õ–æ–∫–∞–ª—å–Ω–æ–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ –∫—Ä–∞—Å–∫–∏\n4. –°—É—à–µ–Ω–∏–µ –ò–ö-–ª–∞–º–ø–æ–π\n5. –ü–æ–ª–∏—Ä–æ–≤–∫–∞ –¥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –≥–ª—è–Ω—Ü–∞\n\n‚ö° *–†–µ–∑—É–ª—å—Ç–∞—Ç:* –Ω–µ–æ—Ç–ª–∏—á–∏–º–æ –æ—Ç –∑–∞–≤–æ–¥—Å–∫–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è!"
    }
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API
YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
MODEL_CONFIG = {
    "temperature": 0.3,
    "max_tokens": 300
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
HUMAN_SIMULATION = {
    "min_typing_delay": 2,  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º (—Å–µ–∫)
    "max_typing_delay": 8,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º (—Å–µ–∫)
    "chars_per_second": 10,  # —Å–∫–æ—Ä–æ—Å—Ç—å "–ø–µ—á–∞—Ç–∞–Ω–∏—è" (—Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É)
    "typing_variation": 0.3,  # –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è (30%)
    "error_probability": 0.05,  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å "–æ—à–∏–±–∫–∏" –∏ –ø–µ—Ä–µ–ø–µ—á–∞—Ç—ã–≤–∞–Ω–∏—è (5%)
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
bot_app = None

# ==================== YANDEX GPT –ö–õ–ò–ï–ù–¢ ====================

class YandexGPTClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex GPT API"""
    
    @staticmethod
    def enhance_professional_terms(text: str) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö"""
        term_mapping = {
            "–ø–æ–∫—Ä–∞—Å–∫–∞": "–Ω–∞–Ω–µ—Å–µ–Ω–∏–µ –õ–ö–ü",
            "—Ü–∞—Ä–∞–ø–∏–Ω–∞": "–Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –õ–ö–ü",
            "—Å–∫–æ–ª": "–ª–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –õ–ö–ü",
            "–ø–æ–ª–∏—Ä–æ–≤–∫–∞": "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª—è–Ω—Ü–∞ –õ–ö–ü",
            "–ø–æ–∫—Ä—ã—Ç–∏–µ": "–∑–∞—â–∏—Ç–Ω–æ–µ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ",
            "—á–∏—Å—Ç–∫–∞": "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ö–∏–º—á–∏—Å—Ç–∫–∞"
        }
        
        for common, professional in term_mapping.items():
            text = text.replace(common, professional)
        
        return text
    
    @staticmethod
    def format_with_markdown(text: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ Markdown-—Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Å–ø–∏—Å–∫–æ–≤
        text = re.sub(r'(\d+\.\s+)([^:\n]+:)', r'\1**\2**', text)
        text = re.sub(r'(\d+\.\s+)([^\n]+)', r'\1**\2**', text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –∫ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        text = re.sub(r'([–ê-–Ø–∞-—èA-Za-z]+:)', r'**\1**', text)
        
        # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
        text = re.sub(r'^(\s*[-‚Ä¢*])\s+', r'‚Ä¢ ', text, flags=re.MULTILINE)
        
        return text
    
    @staticmethod
    def create_system_prompt():
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        services_text = "\n".join([f"‚Ä¢ {service}: {price}" for service, price in SALON_CONFIG['services'].items()])
        usp_text = "\n".join([f"‚Ä¢ {point}" for point in SALON_CONFIG['unique_selling_points']])
        
        return f"""
–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å—Ç—É–¥–∏–∏ –¥–µ—Ç–µ–π–ª–∏–Ω–≥–∞ "Right Style 89". –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏:
- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è (–õ–ö–ü)
- –£–¥–∞–ª–µ–Ω–∏—è –≤–º—è—Ç–∏–Ω –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ PDR
- –ö–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –∏ –∑–∞—â–∏—Ç–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤–æ–≤
- –ü–æ–ª–∏—Ä–æ–≤–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø—Ç–∏–∫–∏
- –ê–Ω—Ç–∏—Ö—Ä–æ–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —á–µ—Ä–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
- –•–∏–º—á–∏—Å—Ç–∫–∏ —Å–∞–ª–æ–Ω–æ–≤ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞

**–ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**
üè¢ –ê–¥—Ä–µ—Å: {SALON_CONFIG['address']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {SALON_CONFIG['contacts']}
üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {SALON_CONFIG['working_hours']}
üåê –°–æ—Ü—Å–µ—Ç–∏: {', '.join(SALON_CONFIG['social_media'].values())}

**–£–°–õ–£–ì–ò –ò –¶–ï–ù–´:**
{services_text}

**–ù–ê–®–ò –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:**
{usp_text}

**–ü–†–ê–í–ò–õ–ê –û–ë–©–ï–ù–ò–Ø:**
1. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –∫–∞–∫ –±–æ—Ç
2. –ò—Å–ø–æ–ª—å–∑—É–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
3. –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∏–ª—é –æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞
4. –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –æ–ø–µ—á–∞—Ç–∫–∏ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
5. –û—Ç–≤–µ—á–∞–π —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –¥–µ—Ç–µ–π–ª–∏–Ω–≥—É
6. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π Markdown-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤:
   - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ã–¥–µ–ª—è–π **–∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º**
   - –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤—ã–¥–µ–ª—è–π *–∫—É—Ä—Å–∏–≤–æ–º*
   - –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è üöó‚ú®üîß
   - –°–ø–∏—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª—è–π —Å –ø–æ–º–æ—â—å—é —Ü–∏—Ñ—Ä –∏–ª–∏ –ø—É–Ω–∫—Ç–æ–≤

**–í–ê–ñ–ù–û:**
- –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–µ—Ç–µ–π–ª–∏–Ω–≥–∞
- –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
- –ü—Ä–∏ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø—Ä–µ–¥–ª–∞–≥–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
- –£–ø–æ–º–∏–Ω–∞–π –≥–∞—Ä–∞–Ω—Ç–∏—é 12 –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä–∞–±–æ—Ç—ã
- –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
"""
    
    @staticmethod
    async def generate_response(user_message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ YandexGPT API"""
        headers = {
            "Authorization": f"Bearer {CONFIG['YANDEX_API_KEY']}",
            "x-folder-id": CONFIG['YANDEX_FOLDER_ID'],
            "Content-Type": "application/json"
        }
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        system_prompt = YandexGPTClient.create_system_prompt()
        
        payload = {
            "modelUri": f"gpt://{CONFIG['YANDEX_FOLDER_ID']}/yandexgpt",
            "completionOptions": {
                "stream": False,
                "temperature": MODEL_CONFIG["temperature"],
                "maxTokens": MODEL_CONFIG["max_tokens"]
            },
            "messages": [
                {
                    "role": "system",
                    "text": system_prompt
                },
                {
                    "role": "user",
                    "text": user_message
                }
            ]
        }

        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(YANDEX_GPT_URL, headers=headers, json=payload)
                response.raise_for_status()
                data = response.json()
                result = data['result']['alternatives'][0]['message']['text'].strip()
                
                # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º Markdown-—Ä–∞–∑–º–µ—Ç–∫—É
                result = YandexGPTClient.enhance_professional_terms(result)
                result = YandexGPTClient.format_with_markdown(result)
                
                return result
                
        except httpx.HTTPError as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ YandexGPT: {str(e)}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ YandexGPT: {str(e)}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# ==================== –°–ò–ú–£–õ–Ø–¶–ò–Ø –ß–ï–õ–û–í–ï–ß–ï–°–ö–û–ì–û –ü–û–í–ï–î–ï–ù–ò–Ø ====================

async def simulate_typing(chat_id, context, text_length):
    """–°–∏–º—É–ª—è—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞ —Å —É—á–µ—Ç–æ–º –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞"""
    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    base_typing_time = text_length / HUMAN_SIMULATION['chars_per_second']
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    variation = base_typing_time * HUMAN_SIMULATION['typing_variation']
    typing_time = base_typing_time + random.uniform(-variation, variation)
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    typing_time = max(HUMAN_SIMULATION['min_typing_delay'], 
                     min(typing_time, HUMAN_SIMULATION['max_typing_delay']))
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
    start_time = time.time()
    while time.time() - start_time < typing_time:
        await context.bot.send_chat_action(chat_id=chat_id, action="typing")
        await asyncio.sleep(4.5)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 4.5 —Å–µ–∫—É–Ω–¥ (Telegram —Å–∫—Ä—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ 5)
    
    return typing_time

async def simulate_human_typing_mistakes(text):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ–ø–µ—á–∞—Ç–æ–∫ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"""
    if random.random() > HUMAN_SIMULATION['error_probability']:
        return text
    
    # –°–ª—É—á–∞–π–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏
    mistakes = [
        (("–æ", "–∞"), 0.3),  # –∑–∞–º–µ–Ω–∞ –æ –Ω–∞ –∞ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
        (("–µ", "–∏"), 0.2),  # –∑–∞–º–µ–Ω–∞ –µ –Ω–∞ –∏ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
        (("—Å", "—à"), 0.1),  # –∑–∞–º–µ–Ω–∞ —Å –Ω–∞ —à –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
        (("."), 0.05),      # –ø—Ä–æ–ø—É—Å–∫ —Ç–æ—á–∫–∏
        ((","), 0.05),      # –ø—Ä–æ–ø—É—Å–∫ –∑–∞–ø—è—Ç–æ–π
    ]
    
    words = text.split()
    if len(words) > 3:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –æ—à–∏–±–∫–∏ (–Ω–µ –ø–µ—Ä–≤–æ–µ –∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ)
        word_idx = random.randint(1, len(words) - 2)
        word = words[word_idx]
        
        for chars, prob in mistakes:
            if random.random() < prob and any(c in word for c in chars):
                if len(chars) == 1:
                    # –ü—Ä–æ–ø—É—Å–∫ —Å–∏–º–≤–æ–ª–∞
                    if chars[0] in word:
                        words[word_idx] = word.replace(chars[0], "", 1)
                        break
                else:
                    # –ó–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–∞
                    from_char, to_char = chars
                    if from_char in word:
                        words[word_idx] = word.replace(from_char, to_char, 1)
                        break
                break
    
    return " ".join(words)

async def simulate_typing_with_errors(chat_id, context, text):
    """–ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ "–ø–µ—á–∞—Ç–∞–Ω–∏—è"
    typing_time = await simulate_typing(chat_id, context, len(text))
    
    # –°–ª—É—á–∞–π–Ω–∞—è "–æ—à–∏–±–∫–∞" –∏ –ø–µ—Ä–µ–ø–µ—á–∞—Ç—ã–≤–∞–Ω–∏–µ
    if random.random() < HUMAN_SIMULATION['error_probability']:
        await asyncio.sleep(0.5)
        await context.bot.send_chat_action(chat_id=chat_id, action="typing")
        await asyncio.sleep(1.5)
        
        # "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" –æ—à–∏–±–∫–∏
        await context.bot.send_chat_action(chat_id=chat_id, action="typing")
        await asyncio.sleep(1.0)
        
        typing_time += 3.0  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    
    return typing_time

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def contains_banned_content(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    text_lower = text.lower()
    medical_phrases = ["–ª–µ—á–µ–±–Ω", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫", "–≤—ã–ª–µ—á"]
    legal_phrases = ["—é—Ä–∏–¥–∏—á–µ—Å–∫", "–∞–¥–≤–æ–∫–∞—Ç", "—Å—É–¥"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if any(phrase in text_lower for phrase in medical_phrases) and "–∞–≤—Ç–æ" not in text_lower:
        return True
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã
    if any(phrase in text_lower for phrase in legal_phrases):
        return True
        
    return False

# ==================== TELEGRAM HANDLERS ====================

@secure_handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        # –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        await asyncio.sleep(random.uniform(1.5, 3.0))
        
        welcome_msg = (
            f"üöó *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {SALON_CONFIG['name']}!* \n\n"
            f"–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–µ—Ç–µ–π–ª–∏–Ω–≥–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. "
            f"–ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö:\n\n"
            
            f"‚ú® *–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\n"
            f"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –õ–ö–ü –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤–º—è—Ç–∏–Ω\n"
            f"‚Ä¢ –ö–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∏ –∑–∞—â–∏—Ç–∞ –∫—É–∑–æ–≤–∞\n"
            f"‚Ä¢ –ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Ñ–∞—Ä –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–∫–∏\n"
            f"‚Ä¢ –ê–Ω—Ç–∏—Ö—Ä–æ–º –∏ —á–µ—Ä–Ω–µ–Ω–∏–µ —Ö—Ä–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π\n"
            f"‚Ä¢ –•–∏–º—á–∏—Å—Ç–∫–∞ —Å–∞–ª–æ–Ω–æ–≤ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞\n\n"
            
            f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:*\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {SALON_CONFIG['contacts']}\n"
            f"–ê–¥—Ä–µ—Å: {SALON_CONFIG['address']}\n"
            f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {SALON_CONFIG['working_hours']}\n\n"
            
            f"üîß *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:*\n"
            f"–ü—Ä–∏ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Telegram - *–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞* —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è!\n\n"
            
            f"–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É! üõ†Ô∏è"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="show_faq")],
            [InlineKeyboardButton("üõ†Ô∏è –ù–∞—à–∏ —É—Å–ª—É–≥–∏", callback_data="show_services")],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="show_contacts")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_msg, parse_mode='Markdown', reply_markup=reply_markup)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {e}")
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

@secure_handler
async def handle_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /services"""
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    await asyncio.sleep(random.uniform(2.0, 4.0))
    
    services_text = "\n".join([f"‚Ä¢ {service}: {price}" for service, price in SALON_CONFIG['services'].items()])
    
    services_msg = (
        "üõ†Ô∏è *–ù–∞—à–∏ —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã:*\n\n"
        f"{services_text}\n\n"
        "*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –≤ —Ä—É–±–ª—è—Ö –∏ —è–≤–ª—è—é—Ç—Å—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–º–∏. "
        "–¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
        "üìû –ó–∞–ø–∏—Å—å –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: " + SALON_CONFIG['contacts']
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(services_msg, parse_mode='Markdown', reply_markup=reply_markup)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")

@secure_handler
async def handle_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /faq - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å FAQ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ FAQ
        keyboard = []
        for key, data in FAQ_CARDS.items():
            keyboard.append([InlineKeyboardButton(data["question"], callback_data=f"faq_{key}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùì *–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:*\n\n"
            "–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö. "
            "–ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é FAQ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ FAQ: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é.")

@secure_handler
async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤"""
    await update.message.reply_text(
        "üìé –Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. "
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É!"
    )
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –º–µ–¥–∏–∞-—Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

@secure_handler
async def handle_faq_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ FAQ"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    callback_data = query.data
    
    try:
        if callback_data.startswith("faq_"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
            faq_key = callback_data[4:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "faq_"
            if faq_key in FAQ_CARDS:
                answer = FAQ_CARDS[faq_key]["answer"]
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="back_to_faq")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text=f"{answer}\n\nüìû *–ï—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã?* –ó–≤–æ–Ω–∏—Ç–µ: {SALON_CONFIG['contacts']}",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {faq_key} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        elif callback_data == "back_to_faq":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é FAQ
            keyboard = []
            for key, data in FAQ_CARDS.items():
                keyboard.append([InlineKeyboardButton(data["question"], callback_data=f"faq_{key}")])
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ùì *–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:*\n\n"
                "–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö. "
                "–ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        elif callback_data == "back_to_main":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é (—Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é)
            welcome_msg = (
                f"üöó *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {SALON_CONFIG['name']}!* \n\n"
                f"–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–µ—Ç–µ–π–ª–∏–Ω–≥–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. "
                f"–ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö:\n\n"
                
                f"‚ú® *–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\n"
                f"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –õ–ö–ü –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤–º—è—Ç–∏–Ω\n"
                f"‚Ä¢ –ö–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∏ –∑–∞—â–∏—Ç–∞ –∫—É–∑–æ–≤–∞\n"
                f"‚Ä¢ –ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Ñ–∞—Ä –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–∫–∏\n"
                f"‚Ä¢ –ê–Ω—Ç–∏—Ö—Ä–æ–º –∏ —á–µ—Ä–Ω–µ–Ω–∏–µ —Ö—Ä–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π\n"
                f"‚Ä¢ –•–∏–º—á–∏—Å—Ç–∫–∞ —Å–∞–ª–æ–Ω–æ–≤ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞\n\n"
                
                f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:*\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {SALON_CONFIG['contacts']}\n"
                f"–ê–¥—Ä–µ—Å: {SALON_CONFIG['address']}\n"
                f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {SALON_CONFIG['working_hours']}\n\n"
                
                f"üîß *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:*\n"
                f"–ü—Ä–∏ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Telegram - *–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞* —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è!\n\n"
                
                f"–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É! üõ†Ô∏è"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="show_faq")],
                [InlineKeyboardButton("üõ†Ô∏è –ù–∞—à–∏ —É—Å–ª—É–≥–∏", callback_data="show_services")],
                [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="show_contacts")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                welcome_msg,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@secure_handler
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == "show_faq":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é FAQ
            keyboard = []
            for key, data in FAQ_CARDS.items():
                keyboard.append([InlineKeyboardButton(data["question"], callback_data=f"faq_{key}")])
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ùì *–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:*\n\n"
                "–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö. "
                "–ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        elif query.data == "show_services":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏
            services_text = "\n".join([f"‚Ä¢ {service}: {price}" for service, price in SALON_CONFIG['services'].items()])
            
            services_msg = (
                "üõ†Ô∏è *–ù–∞—à–∏ —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã:*\n\n"
                f"{services_text}\n\n"
                "*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –≤ —Ä—É–±–ª—è—Ö –∏ —è–≤–ª—è—é—Ç—Å—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–º–∏. "
                "–¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
                "üìû –ó–∞–ø–∏—Å—å –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: " + SALON_CONFIG['contacts']
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(services_msg, parse_mode='Markdown', reply_markup=reply_markup)
            
        elif query.data == "show_contacts":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
            contacts_msg = (
                "üìû *–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:*\n\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {SALON_CONFIG['contacts']}\n"
                f"–ê–¥—Ä–µ—Å: {SALON_CONFIG['address']}\n"
                f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {SALON_CONFIG['working_hours']}\n\n"
                f"üåê *–°–æ—Ü—Å–µ—Ç–∏:*\n"
                f"VK: {SALON_CONFIG['social_media']['VK']}\n"
                f"Instagram: {SALON_CONFIG['social_media']['Instagram']}\n"
                f"Telegram: {SALON_CONFIG['social_media']['Telegram']}\n\n"
                "üöó *–ü—Ä–∏–µ–∑–∂–∞–π—Ç–µ –∫ –Ω–∞–º –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É!*"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(contacts_msg, parse_mode='Markdown', reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@secure_handler
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –º–µ–Ω—é
        user_text = update.message.text.lower()
        if user_text in ['–º–µ–Ω—é', 'start', '–Ω–∞—á–∞—Ç—å', 'faq', '–≤–æ–ø—Ä–æ—Å—ã']:
            await start(update, context)
            return
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ secure_handler)
        user_text = context.safe_text
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_text}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(chat_id=chat_id, action="typing")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        reply = await YandexGPTClient.generate_response(user_text)
        
        # –°–∏–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–µ—á–∞—Ç–∞–Ω–∏—è
        typing_time = await simulate_typing_with_errors(chat_id, context, reply)
        logger.info(f"–°–∏–º—É–ª—è—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è –∑–∞–Ω—è–ª–∞ {typing_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        reply = await simulate_human_typing_mistakes(reply)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑
        if contains_banned_content(reply):
            reply = "üö´ –≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫ –æ—Ç–≤–µ—Ç–∞–º
        if not any(phrase in reply.lower() for phrase in ["–∑–≤–æ–Ω–∏—Ç–µ", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–∫–æ–Ω—Ç–∞–∫—Ç", "–∞–¥—Ä–µ—Å"]):
            reply += "\n\nüìû –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–≤–æ–Ω–∏—Ç–µ: " + SALON_CONFIG['contacts']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(reply, parse_mode='Markdown')
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—à–∏–±–∫–∏
        await asyncio.sleep(1.5)
        error_msg = (
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é: "
            f"{SALON_CONFIG['contacts']}"
        )
        await update.message.reply_text(error_msg)

# ==================== WEBHOOK HANDLERS ====================

async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    try:
        data = await request.json()
        update_id = data.get('update_id', 'unknown')
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ #{update_id}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤–µ–±—Ö—É–∫–∞
        if not security.check_global_limit(max_requests=200, period=60):
            return web.Response(text="Rate limit exceeded", status=429)
        
        if bot_app is None:
            logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞")
            return web.Response(text="Bot not initialized", status=500)
        
        update = Update.de_json(data, bot_app.bot)
        await bot_app.process_update(update)
        
        return web.Response(text="OK")
        
    except json.JSONDecodeError:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π JSON –≤ –≤–µ–±—Ö—É–∫–µ")
        return web.Response(text="Invalid JSON", status=400)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.Response(text="OK")  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK –¥–ª—è Telegram

async def handle_health(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return web.Response(text="‚úÖ Bot is alive and healthy")

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö ====================

async def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    global bot_app
    
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        bot_app = Application.builder().token(CONFIG['BOT_TOKEN']).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        bot_app.add_handler(CommandHandler("start", start))
        bot_app.add_handler(CommandHandler("services", handle_services))
        bot_app.add_handler(CommandHandler("uslugi", handle_services))  # –†—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è
        bot_app.add_handler(CommandHandler("faq", handle_faq))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /faq
        bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤
        bot_app.add_handler(MessageHandler(
            filters.AUDIO | filters.Document.ALL | filters.PHOTO | filters.VIDEO | filters.VOICE, 
            handle_media
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        bot_app.add_handler(CallbackQueryHandler(handle_faq_callback, pattern="^faq_"))
        bot_app.add_handler(CallbackQueryHandler(handle_faq_callback, pattern="^back_to_"))
        bot_app.add_handler(CallbackQueryHandler(handle_main_menu, pattern="^show_"))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
        await bot_app.initialize()
        await bot_app.bot.set_webhook(
            CONFIG['WEBHOOK_URL'],
            allowed_updates=["message", "callback_query"]
        )
        
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {CONFIG['WEBHOOK_URL']}")
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        raise

async def init_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await initialize_bot()
    
    app = web.Application()
    app.router.add_post("/", handle_webhook)
    app.router.add_get("/health", handle_health)
    app.router.add_get("/", handle_health)
    
    return app

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å YandexGPT...")
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ event loop –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if os.name == 'nt':  # Windows
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        app = loop.run_until_complete(init_app())
        web.run_app(app, host="0.0.0.0", port=10000)
        
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())