import os
import json
import httpx
import logging
import asyncio
from aiohttp import web
from telegram import Update
from telegram.ext import Application, ContextTypes, CommandHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([BOT_TOKEN, WEBHOOK_URL, YANDEX_API_KEY, YANDEX_FOLDER_ID]):
    logger.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∞–ª–æ–Ω–∞
SALON_INFO = {
    "name": "Right.style89",
    "address": "–≥. –°–∞–ª–µ—Ö–∞—Ä–¥, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ü–ª–æ—â–∞–¥–∫–∞ ‚Ññ 13, —Å. 26",
    "contacts": "+7 (495) 123-45-67",
    "working_hours": "10:00-22:00 (–±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö)",
    "services": {
        "–£–¥–∞–ª–µ–Ω–∏–µ –≤–º—è—Ç–∏–Ω –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ PDR": "–æ—Ç 1000",
        "–†–µ–º–æ–Ω—Ç-—Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è —Ü–∞—Ä–∞–ø–∏–Ω –¥–æ –º–µ—Ç–∞–ª–ª–∞": "–æ—Ç 2500",
        "–†–µ–º–æ–Ω—Ç-—Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è —Å–∫–æ–ª–æ–≤ –¥–æ –º–µ—Ç–∞–ª–ª–∞": "–æ—Ç 1000",
        "–†–µ–º–æ–Ω—Ç-—Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è –∫–∞–Ω—Ç–æ–≤": "–æ—Ç 2800",
        "–†–µ–º–æ–Ω—Ç-—Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤": "–æ—Ç 3000",
        "–ê–Ω—Ç–∏-—Ö—Ä–æ–º –∏ –æ–∫—Ä–∞—Å —à–∏–ª—å–¥–∏–∫–æ–≤": "–æ—Ç 500",
        "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π-–¥–∏–∑–∞–π–Ω –æ–∫—Ä–∞—Å –ª—é–±–æ–π –¥–µ—Ç–∞–ª–∏": "–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
        "–õ–æ–∫–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å": "–æ—Ç 5000",
        "–ü–æ–ª–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è": "–û—Ç 12000",
        "–ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Ñ–∞—Ä –∏ —Ñ–æ–Ω–∞—Ä–µ–π": "–æ—Ç 2500"
    }
}

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = f"""
–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–∞–ª–æ–Ω–∞ –¥–µ—Ç–µ–π–ª–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª –≤ –¥–µ—Ç–µ–π–ª–∏–Ω–≥–µ –∏ –º–æ–∂–µ—à—å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ –≤–æ–ø—Ä–æ—Å—É –¥–µ—Ç–µ–π–ª–∏–Ω–≥–∞, –ø–æ–∫—Ä–∞—Å–∫–∏ –∏ –∏–Ω—ã—Ö –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º "{SALON_INFO['name']}".

**–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
- –ê–¥—Ä–µ—Å: {SALON_INFO['address']}
- –¢–µ–ª–µ—Ñ–æ–Ω: {SALON_INFO['contacts']}
- –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {SALON_INFO['working_hours']}

**–û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã:**
{json.dumps(SALON_INFO['services'], indent=2, ensure_ascii=False)}

**–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:**
1. –í–µ–∂–ª–∏–≤—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
2. –ù–µ –¥–∞–≤–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
3. –ù–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –ø–æ —Ç–µ–º–µ –æ—Ç–≤–µ—á–∞—Ç—å: "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ª—É—á—à–µ —É—Ç–æ—á–Ω–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
4. –ù–∞ –∞–≥—Ä–µ—Å—Å–∏—é —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ
5. –í—Å–µ —Ü–µ–Ω—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–∫ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ
6. –¢—ã —Å –ª–µ–≥–∫–æ—Å—Ç—å—é –º–æ–∂–µ—à—å –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –¥–µ—Ç–µ–π–ª–∏–Ω–≥—É –≤ –∫—Ä–∞—Ç—Ü–µ

**–í–∞–∂–Ω–æ:**
- –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∞–∫—Ü–∏–∏ - –æ—Ç–≤–µ—á–∞–π "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
- –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª—É–≥–∏
- –ù–∞ –∑–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É —Å–∞–ª–æ–Ω–∞
"""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ YandexGPT
YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
MODEL_CONFIG = {
    "temperature": 0.3,
    "max_tokens": 300
}

class YandexGPTClient:
    @staticmethod
    async def generate_response(user_message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ YandexGPT API"""
        headers = {
            "Authorization": f"Bearer {YANDEX_API_KEY}",
            "x-folder-id": YANDEX_FOLDER_ID,
            "Content-Type": "application/json"
        }
        
        payload = {
            "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt",
            "completionOptions": {
                "stream": False,
                "temperature": MODEL_CONFIG["temperature"],
                "maxTokens": MODEL_CONFIG["max_tokens"]
            },
            "messages": [
                {
                    "role": "system",
                    "text": SYSTEM_PROMPT
                },
                {
                    "role": "user",
                    "text": user_message
                }
            ]
        }

        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(YANDEX_GPT_URL, headers=headers, json=payload)
                response.raise_for_status()
                data = response.json()
                return data['result']['alternatives'][0]['message']['text'].strip()
                
        except Exception as e:
            logger.error(f"YandexGPT error: {str(e)}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
bot_app = None

async def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    global bot_app
    bot_app = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await bot_app.initialize()
    await bot_app.bot.set_webhook(
        WEBHOOK_URL,
        allowed_updates=["message", "callback_query"]
    )
    logger.info(f"Webhook set to: {WEBHOOK_URL}")

# Telegram Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_msg = (
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {SALON_INFO['name']}!\n\n"
        f"–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö.\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏: {SALON_INFO['contacts']}"
    )
    await update.message.reply_text(welcome_msg)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_text = update.message.text
    logger.info(f"Received message: {user_text}")
    
    reply = await YandexGPTClient.generate_response(user_text)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑
    banned_phrases = ["–ª–µ—á–µ–±–Ω", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫", "–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º", "100%"]
    if any(phrase in reply.lower() for phrase in banned_phrases):
        reply = "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞."
    
    await update.message.reply_text(reply)

# Webhook Handler
async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    try:
        data = await request.json()
        logger.info(f"Webhook received: {data.get('update_id')}")
        
        if bot_app is None:
            return web.Response(text="Bot not initialized", status=500)
        
        update = Update.de_json(data, bot_app.bot)
        await bot_app.process_update(update)
        
        return web.Response(text="OK")
        
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return web.Response(text="OK")

# Health check
async def handle_health(request):
    return web.Response(text="Bot is alive")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def init_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    await initialize_bot()
    
    app = web.Application()
    app.router.add_post("/", handle_webhook)
    app.router.add_get("/health", handle_health)
    app.router.add_get("/", handle_health)
    
    return app

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å YandexGPT...")
    try:
        loop = asyncio.get_event_loop()
        app = loop.run_until_complete(init_app())
        web.run_app(app, host="0.0.0.0", port=10000)
    except Exception as e:
        logger.critical(f"Failed to start: {e}")
        exit(1)